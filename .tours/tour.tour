{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "tour",
  "steps": [
    {
      "file": "main.sh",
      "description": "The installer is going to start by installing the formatter variables used to make logs look ðŸª„**fancy**",
      "line": 7
    },
    {
      "file": "main.sh",
      "description": "Right now only Ubuntu is supported, but in theory we should be able to do this on any OS - it will just require unique scripts per OS.",
      "line": 13
    },
    {
      "file": "main.sh",
      "description": "There are a few bits of logic in these scripts that are to ensure there is not any need for usr input outside of the authentication step. This is one of them. Ubuntu comes pre-installed with needrestart, and it immediatly starts yelling at us to restart the machine. We're going to make it be quiet for now and reboot at the end of the setup.",
      "line": 28
    },
    {
      "file": "main.sh",
      "description": "To be ready to begin installation: we need to install unzip so we can extract the Bitwarden CLI in the next step.",
      "line": 30
    },
    {
      "file": "main.sh",
      "description": "Here we download the Bitwarden CLI, extract it, and ensure we have permissions to run it.",
      "line": 46
    },
    {
      "file": "main.sh",
      "description": "Next we're going to log in to Bitwarden to grab the template login used for configuring the environment. Ideally this will be the final interactive element of the setup process, besides running suplementary scripts for optional tooling.",
      "line": 55
    },
    {
      "file": "main.sh",
      "description": "In `parse_config()` and the helper methods above it we search for the configuration template and parse it into variables. We also grab the server secrets.json template, and in a subsequent step we download the licenses that are saved in the dev collection.",
      "line": 74
    },
    {
      "file": "main.sh",
      "description": "Here we're going to add the shared licenses to the certificate store and update it.",
      "line": 95
    },
    {
      "file": "main.sh",
      "description": "Now we're ready to set up a user account. Lets download the `configure-user.sh` script and source it.",
      "line": 102
    },
    {
      "file": "os-configs/ubuntu/configure-user.sh",
      "description": "Now, in the `ubuntu/configure-user.sh` script we'll start by building out a few files and folders for our user account. We'll create a `/home/[USER]` directory, a `.ssh/` folder, a `.cache/` folder, a `.bash_profile`, and a folder to store our projects. Additionally, we'll add the projects folder to our path.",
      "line": 7
    },
    {
      "file": "os-configs/ubuntu/configure-user.sh",
      "description": "This is only really applicable to remote servers, but lets copy any ssh keys from root over to our new user so we can use them to login later.",
      "line": 16
    },
    {
      "file": "os-configs/ubuntu/configure-user.sh",
      "description": "Next, we'll finally create a user based on the username configured in the Bitwarden configuration template.",
      "line": 21
    },
    {
      "file": "os-configs/ubuntu/configure-user.sh",
      "description": "We're going to be doing a lot of sudo-ing, and this is a single-user machine, so lets remove the password requirement for using sudo and let our user run whatever they want to.",
      "line": 26
    },
    {
      "file": "os-configs/ubuntu/configure-user.sh",
      "description": "Now lets assign ownership of the user's home directory and files over to them.",
      "line": 32
    },
    {
      "file": "os-configs/ubuntu/configure-user.sh",
      "description": "Finally, lets relocate our build tools over to the user's home directory (vs. `/root/` where they have been so far.)",
      "line": 42
    },
    {
      "file": "main.sh",
      "description": "Back in the main script: we'll be running all commands as our newly created user account now. From this point forward we'll be installing and configuring dev tools like git, docker, dotnet, and node. We'll also be cloning and building Bitwarden projects. See you in the `ubuntu/configure-dev-environment.sh` script!",
      "line": 105
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "We'll want to start in our user's home directory for the rest of this work, so lets make sure we're in it.",
      "line": 14
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "Another tweak to try and curb any unwanted asks for user input: this environment variable tells the frontend \"I DONT WANT TO TALK TO YOU EVER\"",
      "line": 15
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "We'll start by installing git, setting up a username and password, and configuring the default branch name.",
      "line": 20
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "Next we'll install the Github CLI and authenticate with it using the personal access token from the Bitwarden configuration template. We'll also store that token in an environment variable for reuse later.",
      "line": 29
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "Next we'll install docker, and make sure we are listed in the `docker` group.",
      "line": 39
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "Next we'll set up commit signing by generating a GPG key with a random passphrase and adding it to our Github account using the Github cli. We'll also tell git to use it as our signing key for all commits.",
      "line": 53
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "This seems like a good time to do a general update and upgrade of packages.",
      "line": 80
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "Now we'll get in to installing Microsoft tools. To being we'll be registering the Micosoft repo as the default for installing any Micosoft packages. This is advised by MS, and ensures we have all the latest tools straight from the source. It also keeps us from having mismatched versions and tools with the Ubuntu repo versions of Microsoft software.",
      "line": 91
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "Next we'll install powershell",
      "line": 107
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "And then we'll install .NET 6",
      "line": 112
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "With git, github, docker, powershell, and dotnet installed: we are now ready to clone, configure, and build the Bitwarden server. We'll do that in these steps:",
      "line": 117
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "1. Clone the repo",
      "line": 121
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "2. Configure the blame",
      "line": 126
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "3. Setting the pre-commit hook to run dotnet format",
      "line": 130
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "4. Copying the example environment file and populating it with a randomly generated password for our databases.",
      "line": 134
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "5. Running docker compose to build the containers needed to support Bitwarden Cloud",
      "line": 141
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "6. Installing the Azurite tools with powershell",
      "line": 144
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "7. Running migration scripts against the mssql database",
      "line": 149
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "8. Creating Identity and Data Protection certificates.\n9. Adding them to the certificate store\n10. Making note of the fingerprints for our secrets.json step ahead.",
      "line": 151
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "11. Adding the shared dev license to the dotnet x509 store",
      "line": 157
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "12. Configuring secrets.json with our certificate fingerprints and database passwords, and running the script that propogates those secrets across projects.",
      "line": 160
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "With the server built: it's time to start on clients. We'll need node to run them, so lets install nvm, start it, and install node.",
      "line": 190
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "Now we can clone the clients and install their package dependencies. ",
      "line": 177
    },
    {
      "file": "os-configs/ubuntu/configure-dev-environment.sh",
      "description": "Finally, to finish setting up the web vault we'll generate a self signed certificate with mkcert.",
      "line": 199
    },
    {
      "file": "main.sh",
      "description": "That's all for now! Stay tuned for browser, desktop, and CLI builds in the future.",
      "line": 141
    }
  ]
}